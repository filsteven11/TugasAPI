package Controller

import (
	"database/sql"
	"log"
	"net/http"

	"github.com/gin-gonic/gin"
)

var db *sql.DB

func Connect() {
	var err error
	db, err = sql.Open("mysql", "root:@tcp(localhost:3306)/APIGIN?parseTime=true&loc=Asia%2FJakarta")
	if err != nil {
		log.Fatal(err)
	}
}

func SaveItem(item Item) {
	_, err := db.Exec("INSERT INTO items (id, name) VALUES (?, ?)", item.ID, item.Name)
	if err != nil {
		log.Fatal(err)
	}
}

func RetrieveItemByID(id string) (Item, error) {
	var item Item
	err := db.QueryRow("SELECT id, name FROM items WHERE id = ?", id).Scan(&item.ID, &item.Name)
	if err != nil {
		return Item{}, err
	}
	return item, nil
}

func UpdateItem(id string, item Item) {
	_, err := db.Exec("UPDATE items SET name = ? WHERE id = ?", item.Name, id)
	if err != nil {
		log.Fatal(err)
	}
}

func DeleteItem(id string) {
	_, err := db.Exec("DELETE FROM items WHERE id = ?", id)
	if err != nil {
		log.Fatal(err)
	}
}

func CreateHandler(c *gin.Context) {
	var item Item
	if err := c.BindJSON(&item); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	SaveItem(item)

	c.JSON(http.StatusOK, gin.H{"message": "Create endpoint", "item": item})
}

func RetrieveHandler(c *gin.Context) {
	id := c.Param("id")

	item, err := RetrieveItemByID(id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Item not found"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "Retrieve endpoint", "item": item})
}

func UpdateHandler(c *gin.Context) {
	id := c.Param("id")
	var item Item
	if err := c.BindJSON(&item); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	UpdateItem(id, item)

	c.JSON(http.StatusOK, gin.H{"message": "Update endpoint", "id": id, "item": item})
}

func DeleteHandler(c *gin.Context) {
	id := c.Param("id")

	DeleteItem(id)

	c.JSON(http.StatusOK, gin.H{"message": "Delete endpoint", "id": id})
}
